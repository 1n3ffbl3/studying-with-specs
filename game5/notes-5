play function
        FULL BEHAVIOR: If null equals to boardState at row [row] and column [column] than depending on state (true/false) of nextPlayer it assigns the value of "x" or "o" into boardState[row][column]. After assignment it toggles nextPlayer. Then refresh the board by calling function populateBoard. If boardState from box.id is not equal null,then it shows alert message.

Changed variables in populateBoard function:
 - "i" is changed to "row"
 - "j" is changed to "col"
I did it to make code more selfexplanating. 

 populateBoard function 
        FULL BEHAVIOR: We assign all the rows, which are stored in HTMLCollection (table -> tbody -> [tr, tr, tr]), to board variable. We declare two support variables row and column, which at declaration time are undefined. After that we iterate over each row. For each row, we assign all the columns to given row (board[r].children), to "row" variable. Next, we iterate in nested loop over all the columns. For each column, we assign value of column to "column" variable (row[col]). It gives us access to concrete cell on the board. Then we assign the value of boardState[r][col] to column innerHTML property. 

VISUAL INTERPRETATION OF TABLE JS & HTML STRUCTURE: 

```js
function populateBoard() {
	var board = document.getElementById('ticTacBoard').children[0].children;
	var row;
	var column;
	for(var r = 0; r < 3; r++) {
		row = board[r].children; // tr => [td, td, td]
		for(var col = 0; col < 3; col++) {
			column = row[col]; //board[r].children[col] == td
			column.innerHTML = boardState[r][col];
		};
	};
}; 
``js

 <table id='ticTacBoard'>
    <tbody> <!-- table.children[0] -->
      <tr row='0'> <!-- table.children[0].children[0] -->
        <td column='0' onclick='play(this)'></td> <!-- table.children[0].children[0].children[0] -->
        <td column='1' onclick='play(this)'></td> <!-- table.children[0].children[0].children[1] -->
        <td column='2' onclick='play(this)'></td> <!-- table.children[0].children[0].children[2] -->
      </tr>
      <tr row='1'> <!-- table.children[0].children[1] -->
        <td column='0' onclick='play(this)'></td>
        <td column='1' onclick='play(this)'></td>
        <td column='2' onclick='play(this)'></td>
      </tr>
      <tr row='2'> <!-- table.children[0].children[2] -->
        <td column='0' onclick='play(this)'></td>
        <td column='1' onclick='play(this)'></td>
        <td column='2' onclick='play(this)'></td>
      </tr>
    </tbody>
  </table>


OR if there are thead AND tbody inside the table

<table>
    <thead><!-- table.children[0] -->
        <tr row='0'> <!-- table.children[0].children[0] -->
            <td column='0' onclick='play(this)'></td> <!-- table.children[0].children[0].children[0] -->
            <td column='1' onclick='play(this)'></td> <!-- table.children[0].children[0].children[1] -->
            <td column='2' onclick='play(this)'></td> <!-- table.children[0].children[0].children[2] -->
        </tr>
    </thead>
    <tbody><!-- table.children[1] -->
        <tr row='0'> <!-- table.children[1].children[0] -->
            <td column='0' onclick='play(this)'></td> <!-- table.children[1].children[0].children[0] -->
            <td column='1' onclick='play(this)'></td> <!-- table.children[1].children[0].children[1] -->
            <td column='2' onclick='play(this)'></td> <!-- table.children[1].children[0].children[2] -->
        </tr>
    </tbody>
</table>
